When would you want to use a remote repository rather than keeping all your work
local?

    When working on different computers or collaborating with other people.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    - Because you could be working on your local repository, so an automatic
    pull would have to erase your progress, or let you save your it some way,
    which probably would be confusing.
    
    - Because some branches pushed to GitHub by other users might not be of your
    interest.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    - Forks copy a repository from GitHub to GitHub, and indicate on the created
    repository that it was forked by the first one.

    - Clones copy a repository from GitHub to a "non-GitHub" machine or from a
    non-GitHub machine to another non-GitHub machine. In the former case, also
    create a remote poiting to the GitHub repository. (I'm not sure if that
    happens also in the latter case).

    - Branches are labels that point to one commit.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It allows to open its files' versions locally, without needing internet
    access, and probably with a better editor than the online one. It also allows
    to compare the fetched branches with the local ones, by running Git commands
    like Git diff.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    By sending emails, sharing files on a server, or using Dropbox. It would be
    easier to find people who knows how to use those means. It would be harder
    everything else. For example, with dropbox it's not possible to see the past
    versions of the files while being offline. And to compare differences between
    files, it would be necessary to use another tool, like the ones in the command
    line. And the changes wouldn't have a message (meta-data explaining the
    change). Etc.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When you want your changes to be notified, visualized, commented or improved
    more easily by other users, before adding them to the master branch. So the
    master branch is more likely to be out of bugs. The downside is that it takes
    longer to make changes to the master and it's a more convoluted process.